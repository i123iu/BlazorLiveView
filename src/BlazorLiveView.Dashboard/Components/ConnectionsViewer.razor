@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Options

@implements IDisposable
@inject IConnectionTracker connectionTracker
@inject ILiveViewMirrorUriBuilder mirrorUriBuilder

<table class="connections-table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Location</th>
            <th>Connected at</th>
            <th>Mirror link</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var connection in connectionTracker.ListConnections())
        {
            <tr class="circuit-row">
                <td>@TruncateId(connection.Id)</td>
                <td>@connection.Uri</td>
                <td>@connection.ConnectedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                <td>
                    <a href="@(mirrorUriBuilder.GetPathAndQuery(new MirrorUri(connection.Id)))"
                        target="_blank">
                        Open mirror
                    </a>
                </td>
            </tr>
        }
    </tbody>
</table>

@code
{
    protected override void OnInitialized()
    {
        base.OnInitialized();
        connectionTracker.ConnectionOpened += OnConnectionOpened;
        connectionTracker.ConnectionClosed += OnConnectionClosed;
        foreach (var connection in connectionTracker.ListConnections())
        {
            connection.UriChanged += OnAnyConnectionUriChanged;
        }
    }

    private void OnConnectionOpened(IConnection connection)
    {
        connection.UriChanged += OnAnyConnectionUriChanged;
        OnAnyConnectionChanged();
    }

    private void OnConnectionClosed(IConnection connection)
    {
        connection.UriChanged -= OnAnyConnectionUriChanged;
        OnAnyConnectionChanged();
    }

    private void OnAnyConnectionUriChanged(IConnection connection)
    {
        OnAnyConnectionChanged();
    }

    private void OnAnyConnectionChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        connectionTracker.ConnectionOpened -= OnConnectionOpened;
        connectionTracker.ConnectionClosed -= OnConnectionClosed;
    }

    private static string TruncateId(string? id)
    {
        const int maxLength = 16;
        return string.IsNullOrEmpty(id)
            ? string.Empty
            : (id!.Length > maxLength ? id[..maxLength] + "..." : id);
    }
}