@using Microsoft.AspNetCore.Components.Forms
@using Microsoft.AspNetCore.Components.Web
@using Microsoft.Extensions.Options

@implements IDisposable
@inject ICircuitTracker circuitTracker
@inject ILiveViewMirrorUriBuilder mirrorUriBuilder

<table class="circuits-table">
    <thead>
        <tr>
            <th>Id</th>
            <th>Location</th>
            <th>Connected at</th>
            <th>Mirror link</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var circuit in circuitTracker.ListCircuits())
        {
            if (circuit is IUserCircuit userCircuit)
            {
                <tr class="circuit-row">
                    <td>@TruncateId(userCircuit.Id)</td>
                    <td>@userCircuit.Uri</td>
                    <td>@userCircuit.OpenedAt.ToLocalTime().ToString("yyyy-MM-dd HH:mm:ss")</td>
                    <td>
                        <a href="@(mirrorUriBuilder.GetPathAndQuery(new MirrorUri(userCircuit.Id)))"
                           target="_blank">
                            Open mirror
                        </a>
                    </td>
                </tr>
            }
        }
    </tbody>
</table>

@code
{
    protected override void OnInitialized()
    {
        base.OnInitialized();
        circuitTracker.CircuitOpenedEvent += OnCircuitOpened;
        circuitTracker.CircuitClosedEvent += OnCircuitClosed;
        foreach (var circuit in circuitTracker.ListCircuits())
        {
            if (circuit is IUserCircuit userCircuit)
            {
                userCircuit.UriChanged += OnAnyCircuitUriChanged;
            }
        }
    }

    private void OnCircuitOpened(ICircuit circuit)
    {
        if (circuit is IUserCircuit userCircuit)
        {
            userCircuit.UriChanged += OnAnyCircuitUriChanged;
            OnAnyCircuitChanged();
        }
    }

    private void OnCircuitClosed(ICircuit circuit)
    {
        if (circuit is IUserCircuit userCircuit)
        {
            userCircuit.UriChanged -= OnAnyCircuitUriChanged;
            OnAnyCircuitChanged();
        }
    }

    private void OnAnyCircuitUriChanged(ICircuit circuit)
    {
        OnAnyCircuitChanged();
    }

    private void OnAnyCircuitChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    public void Dispose()
    {
        circuitTracker.CircuitOpenedEvent -= OnCircuitOpened;
        circuitTracker.CircuitClosedEvent -= OnCircuitClosed;
    }

    private static string TruncateId(string? id)
    {
        const int maxLength = 16;
        return string.IsNullOrEmpty(id)
            ? string.Empty
            : (id!.Length > maxLength ? id[..maxLength] + "..." : id);
    }
}